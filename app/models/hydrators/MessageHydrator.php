<?php

namespace Hydrators;

use Doctrine\ODM\MongoDB\DocumentManager;
use Doctrine\ODM\MongoDB\Mapping\ClassMetadata;
use Doctrine\ODM\MongoDB\Hydrator\HydratorInterface;
use Doctrine\ODM\MongoDB\UnitOfWork;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ODM. DO NOT EDIT THIS FILE.
 */
class MessageHydrator implements HydratorInterface
{
    private $dm;
    private $unitOfWork;
    private $class;

    public function __construct(DocumentManager $dm, UnitOfWork $uow, ClassMetadata $class)
    {
        $this->dm = $dm;
        $this->unitOfWork = $uow;
        $this->class = $class;
    }

    public function hydrate($document, $data, array $hints = array())
    {
        $hydratedData = array();

        /** @Field(type="id") */
        if (isset($data['_id'])) {
            $value = $data['_id'];
            $return = (string) $value;
            $this->class->reflFields['id']->setValue($document, $return);
            $hydratedData['id'] = $return;
        }

        /** @ReferenceOne */
        if (isset($data['translation'])) {
            $reference = $data['translation'];
            if (isset($this->class->fieldMappings['translation']['simple']) && $this->class->fieldMappings['translation']['simple']) {
                $className = $this->class->fieldMappings['translation']['targetDocument'];
                $mongoId = $reference;
            } else {
                $className = $this->dm->getClassNameFromDiscriminatorValue($this->class->fieldMappings['translation'], $reference);
                $mongoId = $reference['$id'];
            }
            $targetMetadata = $this->dm->getClassMetadata($className);
            $id = $targetMetadata->getPHPIdentifierValue($mongoId);
            $return = $this->dm->getReference($className, $id);
            $this->class->reflFields['translation']->setValue($document, $return);
            $hydratedData['translation'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['context'])) {
            $value = $data['context'];
            $return = (string) $value;
            $this->class->reflFields['context']->setValue($document, $return);
            $hydratedData['context'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['singular'])) {
            $value = $data['singular'];
            $return = (string) $value;
            $this->class->reflFields['singular']->setValue($document, $return);
            $hydratedData['singular'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['plural'])) {
            $value = $data['plural'];
            $return = (string) $value;
            $this->class->reflFields['plural']->setValue($document, $return);
            $hydratedData['plural'] = $return;
        }

        /** @Field(type="int") */
        if (isset($data['pluralsCount'])) {
            $value = $data['pluralsCount'];
            $return = (int) $value;
            $this->class->reflFields['pluralsCount']->setValue($document, $return);
            $hydratedData['pluralsCount'] = $return;
        }

        /** @Field(type="hash") */
        if (isset($data['translations'])) {
            $value = $data['translations'];
            $return = $value;
            $this->class->reflFields['translations']->setValue($document, $return);
            $hydratedData['translations'] = $return;
        }

        /** @Field(type="boolean") */
        if (isset($data['translated'])) {
            $value = $data['translated'];
            $return = (bool) $value;
            $this->class->reflFields['translated']->setValue($document, $return);
            $hydratedData['translated'] = $return;
        }
        return $hydratedData;
    }
}