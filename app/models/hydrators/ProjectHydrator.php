<?php

namespace Hydrators;

use Doctrine\ODM\MongoDB\DocumentManager;
use Doctrine\ODM\MongoDB\Mapping\ClassMetadata;
use Doctrine\ODM\MongoDB\Hydrator\HydratorInterface;
use Doctrine\ODM\MongoDB\UnitOfWork;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ODM. DO NOT EDIT THIS FILE.
 */
class ProjectHydrator implements HydratorInterface
{
    private $dm;
    private $unitOfWork;
    private $class;

    public function __construct(DocumentManager $dm, UnitOfWork $uow, ClassMetadata $class)
    {
        $this->dm = $dm;
        $this->unitOfWork = $uow;
        $this->class = $class;
    }

    public function hydrate($document, $data, array $hints = array())
    {
        $hydratedData = array();

        /** @Field(type="id") */
        if (isset($data['_id'])) {
            $value = $data['_id'];
            $return = (string) $value;
            $this->class->reflFields['id']->setValue($document, $return);
            $hydratedData['id'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['caption'])) {
            $value = $data['caption'];
            $return = (string) $value;
            $this->class->reflFields['caption']->setValue($document, $return);
            $hydratedData['caption'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['name'])) {
            $value = $data['name'];
            $return = (string) $value;
            $this->class->reflFields['name']->setValue($document, $return);
            $hydratedData['name'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['key'])) {
            $value = $data['key'];
            $return = (string) $value;
            $this->class->reflFields['key']->setValue($document, $return);
            $hydratedData['key'] = $return;
        }

        /** @ReferenceOne */
        if (isset($data['user'])) {
            $reference = $data['user'];
            if (isset($this->class->fieldMappings['user']['simple']) && $this->class->fieldMappings['user']['simple']) {
                $className = $this->class->fieldMappings['user']['targetDocument'];
                $mongoId = $reference;
            } else {
                $className = $this->dm->getClassNameFromDiscriminatorValue($this->class->fieldMappings['user'], $reference);
                $mongoId = $reference['$id'];
            }
            $targetMetadata = $this->dm->getClassMetadata($className);
            $id = $targetMetadata->getPHPIdentifierValue($mongoId);
            $return = $this->dm->getReference($className, $id);
            $this->class->reflFields['user']->setValue($document, $return);
            $hydratedData['user'] = $return;
        }

        /** @Many */
        $mongoData = isset($data['translations']) ? $data['translations'] : null;
        $return = new \Doctrine\ODM\MongoDB\PersistentCollection(new \Doctrine\Common\Collections\ArrayCollection(), $this->dm, $this->unitOfWork, '$');
        $return->setHints($hints);
        $return->setOwner($document, $this->class->fieldMappings['translations']);
        $return->setInitialized(false);
        if ($mongoData) {
            $return->setMongoData($mongoData);
        }
        $this->class->reflFields['translations']->setValue($document, $return);
        $hydratedData['translations'] = $return;

        /** @Field(type="collection") */
        if (isset($data['translationLangs'])) {
            $value = $data['translationLangs'];
            $return = $value;
            $this->class->reflFields['translationLangs']->setValue($document, $return);
            $hydratedData['translationLangs'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['sourceLanguage'])) {
            $value = $data['sourceLanguage'];
            $return = (string) $value;
            $this->class->reflFields['sourceLanguage']->setValue($document, $return);
            $hydratedData['sourceLanguage'] = $return;
        }

        /** @Field(type="hash") */
        if (isset($data['templateMessages'])) {
            $value = $data['templateMessages'];
            $return = $value;
            $this->class->reflFields['templateMessages']->setValue($document, $return);
            $hydratedData['templateMessages'] = $return;
        }
        return $hydratedData;
    }
}