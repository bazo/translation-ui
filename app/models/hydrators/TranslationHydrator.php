<?php

namespace Hydrators;

use Doctrine\ODM\MongoDB\DocumentManager;
use Doctrine\ODM\MongoDB\Mapping\ClassMetadata;
use Doctrine\ODM\MongoDB\Hydrator\HydratorInterface;
use Doctrine\ODM\MongoDB\UnitOfWork;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ODM. DO NOT EDIT THIS FILE.
 */
class TranslationHydrator implements HydratorInterface
{
    private $dm;
    private $unitOfWork;
    private $class;

    public function __construct(DocumentManager $dm, UnitOfWork $uow, ClassMetadata $class)
    {
        $this->dm = $dm;
        $this->unitOfWork = $uow;
        $this->class = $class;
    }

    public function hydrate($document, $data, array $hints = array())
    {
        $hydratedData = array();

        /** @Field(type="id") */
        if (isset($data['_id'])) {
            $value = $data['_id'];
            $return = (string) $value;
            $this->class->reflFields['id']->setValue($document, $return);
            $hydratedData['id'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['lang'])) {
            $value = $data['lang'];
            $return = (string) $value;
            $this->class->reflFields['lang']->setValue($document, $return);
            $hydratedData['lang'] = $return;
        }

        /** @Field(type="int") */
        if (isset($data['pluralsCount'])) {
            $value = $data['pluralsCount'];
            $return = (int) $value;
            $this->class->reflFields['pluralsCount']->setValue($document, $return);
            $hydratedData['pluralsCount'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['pluralRule'])) {
            $value = $data['pluralRule'];
            $return = (string) $value;
            $this->class->reflFields['pluralRule']->setValue($document, $return);
            $hydratedData['pluralRule'] = $return;
        }

        /** @Field(type="hash") */
        if (isset($data['pluralNumbers'])) {
            $value = $data['pluralNumbers'];
            $return = $value;
            $this->class->reflFields['pluralNumbers']->setValue($document, $return);
            $hydratedData['pluralNumbers'] = $return;
        }

        /** @Field(type="int") */
        if (isset($data['messagesCount'])) {
            $value = $data['messagesCount'];
            $return = (int) $value;
            $this->class->reflFields['messagesCount']->setValue($document, $return);
            $hydratedData['messagesCount'] = $return;
        }

        /** @Field(type="int") */
        if (isset($data['translated'])) {
            $value = $data['translated'];
            $return = (int) $value;
            $this->class->reflFields['translated']->setValue($document, $return);
            $hydratedData['translated'] = $return;
        }

        /** @Many */
        $mongoData = isset($data['messages']) ? $data['messages'] : null;
        $return = new \Doctrine\ODM\MongoDB\PersistentCollection(new \Doctrine\Common\Collections\ArrayCollection(), $this->dm, $this->unitOfWork, '$');
        $return->setHints($hints);
        $return->setOwner($document, $this->class->fieldMappings['messages']);
        $return->setInitialized(false);
        if ($mongoData) {
            $return->setMongoData($mongoData);
        }
        $this->class->reflFields['messages']->setValue($document, $return);
        $hydratedData['messages'] = $return;

        /** @Field(type="hash") */
        if (isset($data['messageIds'])) {
            $value = $data['messageIds'];
            $return = $value;
            $this->class->reflFields['messageIds']->setValue($document, $return);
            $hydratedData['messageIds'] = $return;
        }

        /** @ReferenceOne */
        if (isset($data['project'])) {
            $reference = $data['project'];
            if (isset($this->class->fieldMappings['project']['simple']) && $this->class->fieldMappings['project']['simple']) {
                $className = $this->class->fieldMappings['project']['targetDocument'];
                $mongoId = $reference;
            } else {
                $className = $this->dm->getClassNameFromDiscriminatorValue($this->class->fieldMappings['project'], $reference);
                $mongoId = $reference['$id'];
            }
            $targetMetadata = $this->dm->getClassMetadata($className);
            $id = $targetMetadata->getPHPIdentifierValue($mongoId);
            $return = $this->dm->getReference($className, $id);
            $this->class->reflFields['project']->setValue($document, $return);
            $hydratedData['project'] = $return;
        }

        /** @Many */
        $mongoData = isset($data['user']) ? $data['user'] : null;
        $return = new \Doctrine\ODM\MongoDB\PersistentCollection(new \Doctrine\Common\Collections\ArrayCollection(), $this->dm, $this->unitOfWork, '$');
        $return->setHints($hints);
        $return->setOwner($document, $this->class->fieldMappings['user']);
        $return->setInitialized(false);
        if ($mongoData) {
            $return->setMongoData($mongoData);
        }
        $this->class->reflFields['user']->setValue($document, $return);
        $hydratedData['user'] = $return;

        /** @Field(type="date") */
        if (isset($data['created'])) {
            $value = $data['created'];
            if ($value instanceof \MongoDate) { $date = new \DateTime(); $date->setTimestamp($value->sec); $return = $date; } else { $return = new \DateTime($value); }
            $this->class->reflFields['created']->setValue($document, clone $return);
            $hydratedData['created'] = $return;
        }
        return $hydratedData;
    }
}